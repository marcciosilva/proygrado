setwd("/home/muro/Downloads/Palabras 2017-12-17 AR.rds")
setwd("/home/muro/Downloads")
readRDS(file="Palabras 2017-12-17 AR.rds")
rds = readRDS(file="Palabras 2017-12-17 AR.rds")
setwd("/home/muro/twitter-scraper/Palabras")
rds = readRDS(file="Palabras 2017-12-17 AR.rds")
ls()
cd ..
ds = readRDS(file="~/Downloads/Palabras 2017-12-17 AR.rds")
ds = readRDS(file="~/Downloads/estadisticas.rds")
View(ds)
ann128 = create_data_frame("128x4-ann.csv")
create_data_frame <- function(filename){
classifier = read.csv(paste("csvs/con_accuracy/",filename,sep=""))
length(names(classifier))
classifier[,6] = classifier$esperado - classifier$obtenido
names(classifier)[6] = "diff_esperado_con_obtenido"
classifier[,7] = (classifier$obtenido / classifier$esperado * 100) - 100
names(classifier)[7] = "diff_porcentual"
return(classifier)
}
create_polynomial_fit = function(degree,x,y){
params = polyfit(x,y,degree)
fited_y_for_data = 0
index = 1
for (i in degree:0){
fited_y_for_data = fited_y_for_data  + params[index] * x^i
index = index + 1
}
#fited_y_for_data1 = parameters_data1[1]*(data1$tareas)^3 + parameters_data1[2]*(data1$tareas)^2 + (parameters_data1[3])
return(fited_y_for_data)
}
create_electrocardiogram = function(data1,data2,name_data1,name_data2,train_dimension){
fited_y_for_data1 = create_polynomial_fit(3,data1$tareas,data1$diff_porcentual)
fited_y_for_data2 = create_polynomial_fit(3,data2$tareas,data2$diff_porcentual)
p <- plot_ly(data1, x = ~tareas, y = ~diff_porcentual, name = name_data1, type = 'scatter', mode="line",opacity=0.5,line = list(color = 'blue', width = 0.5)) %>%
add_trace(y = fited_y_for_data1, mode = 'lines',line = list(color = 'blue', width = 2),showlegend = FALSE) %>%
add_trace(y = data2$diff_porcentual, name = name_data2, mode = 'lines',opacity=0.5,line = list(color = 'red', width = 0.5)) %>%
add_trace(y = fited_y_for_data2, mode = 'lines',line = list(color = 'red', width = 2),showlegend = FALSE) %>%
layout(title = paste("Escalado en tareas.",train_dimension),
legend = list(x = 0.5, y = 0.9),
xaxis = list(title = "número de tareas"),
yaxis = list (title = "diferencia al makespan esperado (%)"))
return(p)
}
generate_median_min_max_chart = function(calcs,cateogry_values,message){
x = calcs$rangos
y1 = calcs$min
y2= calcs$median
y3 = calcs$max
data = data.frame(x,y1,y2,y3)
p <- plot_ly(data = data, x = ~x, y = ~y3, type = 'bar', name = 'Máximo', marker = list(color = 'rgb(49,130,189)')) %>%
add_trace(y = ~y2, name = 'Mediana', marker = list(color = 'rgba(152, 0, 0, .8)')) %>%
add_trace(y = ~y1, name = 'Mínimo', marker = list(color = 'rgb(204,204,204)')) %>%
layout(xaxis = list(title = "Medianas en escalado", tickangle = -45,
categoryorder = "array",
categoryarray = cateogry_values),
yaxis = list(title = ""),
margin = list(b = 100),
barmode = 'group',
legend = list(x = 0.5, y = 0.9),
title = paste("Medianas por rangos en escalado\n",message))
}
median_analysis = function(data,message){
entry = 1
calcs = data.frame(matrix(vector(),0,3))
for (i in c(200,400,600,800,1000,1200)){
names(calcs) = c("median","max","min")
from = i - 200
to = i
values_to_observe = data[,4] < to & data[,4] >= from
new_data = data[values_to_observe,7]
calcs = rbind(calcs, c(median(new_data),max(new_data),min(new_data)) )
}
categry_values = c("#maquinas+1:199","200:399","400:599","600:799","800:999","1000:1024")
calcs = cbind(calcs,categry_values)
names(calcs)[4] = "rangos"
p = generate_median_min_max_chart(calcs,categry_values,message)
return(p)
}
median_analysis_for_accuracy = function(data,message){
entry = 1
calcs = data.frame(matrix(vector(),0,3))
for (i in c(200,400,600,800,1000,1200)){
names(calcs) = c("median","max","min")
from = i - 200
to = i
values_to_observe = data[,4] < to & data[,4] >= from
new_data = data[values_to_observe,3]
calcs = rbind(calcs, c(median(new_data),max(new_data),min(new_data)) )
}
categry_values = c("#maquinas+1:199","200:399","400:599","600:799","800:999","1000:1024")
calcs = cbind(calcs,categry_values)
names(calcs)[4] = "rangos"
p = generate_median_min_max_chart(calcs,categry_values,message)
return(p)
}
ann128 = create_data_frame("128x4-ann.csv")
svm128 = create_data_frame("128x4-svm.csv")
comparacion_ann_svm_128 = create_electrocardiogram(ann128,svm128,"ann - 2 capas ocultas","svm","128x4")
max_median_min = median_analysis(ann128,"Para ANN entrenada con dimensión 128x4")
max_median_min
ann128 = create_data_frame("128x4-ann.csv")
setwd("~/proygrado/normalidad_graficos")
ann128 = create_data_frame("128x4-ann.csv")
svm128 = create_data_frame("128x4-svm.csv")
comparacion_ann_svm_128 = create_electrocardiogram(ann128,svm128,"ann - 2 capas ocultas","svm","128x4")
max_median_min = median_analysis(ann128,"Para ANN entrenada con dimensión 128x4")
max_median_min
accuracy_plot = median_analysis_for_accuracy
accuracy_plot
accuracy_plot = median_analysis_for_accuracy(ann128,"Para ANN entrenada con dimensión 128x4")
data = ann128
entry = 1
calcs = data.frame(matrix(vector(),0,3))
for (i in c(200,400,600,800,1000,1200)){
names(calcs) = c("median","max","min")
from = i - 200
to = i
values_to_observe = data[,4] < to & data[,4] >= from
new_data = data[values_to_observe,3]
calcs = rbind(calcs, c(median(new_data),max(new_data),min(new_data)) )
}
categry_values = c("#maquinas+1:199","200:399","400:599","600:799","800:999","1000:1024")
calcs = cbind(calcs,categry_values)
View(calcs)
names(calcs)[4] = "rangos"
p = generate_median_min_max_chart(calcs,categry_values,message)
x = calcs$rangos
y1 = calcs$min
y2= calcs$median
y3 = calcs$max
data = data.frame(x,y1,y2,y3)
View(data)
p <- plot_ly(data = data, x = ~x, y = ~y3, type = 'bar', name = 'Máximo', marker = list(color = 'rgb(49,130,189)')) %>%
add_trace(y = ~y2, name = 'Mediana', marker = list(color = 'rgba(152, 0, 0, .8)')) %>%
add_trace(y = ~y1, name = 'Mínimo', marker = list(color = 'rgb(204,204,204)')) %>%
layout(xaxis = list(title = "Medianas en escalado", tickangle = -45,
categoryorder = "array",
categoryarray = cateogry_values),
yaxis = list(title = ""),
margin = list(b = 100),
barmode = 'group',
legend = list(x = 0.5, y = 0.9),
title = paste("Medianas por rangos en escalado\n",message))
library("plotly")
library("pracma")
p <- plot_ly(data = data, x = ~x, y = ~y3, type = 'bar', name = 'Máximo', marker = list(color = 'rgb(49,130,189)')) %>%
add_trace(y = ~y2, name = 'Mediana', marker = list(color = 'rgba(152, 0, 0, .8)')) %>%
add_trace(y = ~y1, name = 'Mínimo', marker = list(color = 'rgb(204,204,204)')) %>%
layout(xaxis = list(title = "Medianas en escalado", tickangle = -45,
categoryorder = "array",
categoryarray = cateogry_values),
yaxis = list(title = ""),
margin = list(b = 100),
barmode = 'group',
legend = list(x = 0.5, y = 0.9),
title = paste("Medianas por rangos en escalado\n",message))
accuracy_plot = median_analysis_for_accuracy(ann128,"Para ANN entrenada con dimensión 128x4")
accuracy_plot
library("plotly")
library("pracma")
setwd("~/proygrado/normalidad_graficos")
library("plotly")
library("pracma")
setwd("~/proygrado/normalidad_graficos")
library("plotly")
library("pracma")
setwd("~/proygrado/normalidad_graficos")
create_data_frame <- function(filename){
classifier = read.csv(paste("csvs/con_accuracy/",filename,sep=""))
length(names(classifier))
classifier[,6] = classifier$esperado - classifier$obtenido
names(classifier)[6] = "diff_esperado_con_obtenido"
classifier[,7] = (classifier$obtenido / classifier$esperado * 100) - 100
names(classifier)[7] = "diff_porcentual"
return(classifier)
}
create_polynomial_fit = function(degree,x,y){
params = polyfit(x,y,degree)
fited_y_for_data = 0
index = 1
for (i in degree:0){
fited_y_for_data = fited_y_for_data  + params[index] * x^i
index = index + 1
}
return(fited_y_for_data)
}
create_electrocardiogram = function(data1,data2,name_data1,name_data2,train_dimension){
fited_y_for_data1 = create_polynomial_fit(3,data1$tareas,data1$diff_porcentual)
fited_y_for_data2 = create_polynomial_fit(3,data2$tareas,data2$diff_porcentual)
p <- plot_ly(data1, x = ~tareas, y = ~diff_porcentual, name = name_data1, type = 'scatter', mode="line",opacity=0.5,line = list(color = 'blue', width = 0.5)) %>%
add_trace(y = fited_y_for_data1, mode = 'lines',line = list(color = 'blue', width = 2),showlegend = FALSE) %>%
add_trace(y = data2$diff_porcentual, name = name_data2, mode = 'lines',opacity=0.5,line = list(color = 'red', width = 0.5)) %>%
add_trace(y = fited_y_for_data2, mode = 'lines',line = list(color = 'red', width = 2),showlegend = FALSE) %>%
layout(title = paste("Escalado en tareas.",train_dimension),
legend = list(x = 0.5, y = 0.9),
xaxis = list(title = "número de tareas"),
yaxis = list (title = "diferencia al makespan esperado (%)"))
return(p)
}
get_max_median_and_min = function(data,index_x,index_y){
entry = 1
calcs = data.frame(matrix(vector(),0,3))
for (i in c(200,400,600,800,1000,1200)){
names(calcs) = c("median","max","min")
from = i - 200
to = i
values_to_observe = data[,index_x] < to & data[,index_x] >= from
new_data = data[values_to_observe,index_y]
calcs = rbind(calcs, c(median(new_data),max(new_data),min(new_data)) )
}
categry_values = c("#maquinas+1:199","200:399","400:599","600:799","800:999","1000:1024")
calcs = cbind(calcs,categry_values)
names(calcs)[4] = "rangos"
return(calcs)
}
generate_median_min_max_chart = function(calcs,title,x_title,y_title){
x = calcs$rangos
y1 = calcs$min
y2= calcs$median
y3 = calcs$max
data = data.frame(x,y1,y2,y3)
p <- plot_ly(data = data, x = ~x, y = ~y3, type = 'bar', name = 'Máximo', marker = list(color = 'rgb(49,130,189)')) %>%
add_trace(y = ~y2, name = 'Mediana', marker = list(color = 'rgba(152, 0, 0, .8)')) %>%
add_trace(y = ~y1, name = 'Mínimo', marker = list(color = 'rgb(204,204,204)')) %>%
layout(xaxis = list(title = x_title, tickangle = -45,
categoryorder = "array",
categoryarray = calcs$rangos),
yaxis = list(title = y_title),
margin = list(b = 100),
barmode = 'group',
legend = list(x = 0.5, y = 0.9),
title = title)
return(p)
}
create_percentage_median_plot = function(data,index_accuracy,index_tareas,index_diff,index_percentage){
median_data_frame = get_max_median_and_min(data,index_tareas,index_percentage)
generate_median_min_max_chart(median_data_frame,"Titulo","titulo_x","titulo_y")
}
ann128 = create_data_frame("128x4-ann.csv")
svm128 = create_data_frame("128x4-svm.csv")
median_plot = create_percentage_median_plot(ann128)
median_plot = create_percentage_median_plot(ann128,4,7)
get_max_mins_meds_by_range = function(data,tareas,valor_a_analizar){
entry = 1
calcs = data.frame(matrix(vector(),0,3))
for (i in c(200,400,600,800,1000,1200)){
names(calcs) = c("median","max","min")
from = i - 200
to = i
values_to_observe = data[,tareas] < to & data[,tareas] >= from
new_data = data[values_to_observe,valor_a_analizar]
calcs = rbind(calcs, c(median(new_data),max(new_data),min(new_data)) )
}
categry_values = c("#maquinas+1:199","200:399","400:599","600:799","800:999","1000:1024")
calcs = cbind(calcs,categry_values)
names(calcs)[4] = "rangos"
p = generate_median_min_max_chart(calcs,categry_values,message)
}
medianas_ann128 = get_max_mins_meds_by_range(ann128,3,7)
get_max_mins_meds_by_range = function(data,tareas,valor_a_analizar){
entry = 1
calcs = data.frame(matrix(vector(),0,3))
for (i in c(200,400,600,800,1000,1200)){
names(calcs) = c("median","max","min")
from = i - 200
to = i
values_to_observe = data[,tareas] < to & data[,tareas] >= from
new_data = data[values_to_observe,valor_a_analizar]
calcs = rbind(calcs, c(median(new_data),max(new_data),min(new_data)) )
}
categry_values = c("#maquinas+1:199","200:399","400:599","600:799","800:999","1000:1024")
calcs = cbind(calcs,categry_values)
names(calcs)[4] = "rangos"
}
medianas_ann128 = get_max_mins_meds_by_range(ann128,3,7)
View(medianas_ann128)
